package com.DP;
public class BridgePatternDemo
{
public static void main(String[] args)
{
DrawAPI redCircleAPI = new RedCircle();
Shape redCircle = new Circle(5, 10, 15, redCircleAPI);
redCircle.draw();
DrawAPI greenCircleAPI = new GreenCircle();
Shape greenCircle = new Circle(8, 25, 30, greenCircleAPI);
greenCircle.draw();
}
}
package com.DP;
public class Circle extends Shape
{
private int radius;
private int x;
private int y;
public Circle(int radius, int x, int y, DrawAPI drawAPI)
{
super(drawAPI);
this.radius = radius;
this.x = x;
this.y = y;
}
public void draw()
{
drawAPI.drawCircle(radius, x, y);
}
}
package com.DP;
//Bridge implementer: DrawAPI
public interface DrawAPI
{
void drawCircle(int radius, int x, int y);
}
package com.DP;
public class GreenCircle implements DrawAPI
{
public void drawCircle(int radius, int x,int y)
{
System.out.println("Drawing green circle with radius "+radius+" at ("+x+ ",
"+y+ ")");
}
}
package com.DP;
public class RedCircle implements DrawAPI
{
public void drawCircle(int radius, int x, int y)
{
System.out.println("Drawing red circle with radius "+radius+"at ("+x+",
"+y+")");
}
}
package com.DP;
public abstract class Shape
{
protected DrawAPI drawAPI;
protected Shape(DrawAPI drawAPI)
{
this.drawAPI = drawAPI;
}
public abstract void draw();
}
